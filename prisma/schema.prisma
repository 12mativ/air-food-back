generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @db.Text
  password String   @db.Text
  roles    String[]

  student Student?
  coach   Coach?
  courses Course[]
}

model Student {
  id         String  @id @default(uuid())
  email      String  @db.Text
  firstName  String? @db.Text
  middleName String? @db.Text
  lastName   String? @db.Text
  birthDate  String? @db.Text
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule       Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  competencies StudentCompetenceCharacteristic[]
  expectingCompetencies StudentExpectingCompetence[]
  courses     Course[]
  userId      String                               @unique
  scheduleId      String                               @unique
  curriculumId      String                               @unique
}

model Course {
  id        String @id @default(uuid())
  name      String @db.Text
  startDate String? @db.Text
  endDate   String? @db.Text
  creatorId String @db.Text

  students                 Student[]
  prerequisiteCompetencies CourseCompetenceCharacteristic[]
  improvingCompetencies    ImprovingCompetence[]
  events                   Event[]
  simulators Simulator[]
  creator                  User?                               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Competence {
  id   String @id @default(uuid())
  name String @db.Text

  improvingCompetencies                ImprovingCompetence[]
  studentExpectingCompetencies StudentExpectingCompetence[]
  competenciesCharacteristicForCourse  CourseCompetenceCharacteristic[]
  competenciesCharacteristicForStudent StudentCompetenceCharacteristic[]
}

model ImprovingCompetence {
  id             String @id @default(uuid())
  improvingValue Int    @default(0) @db.SmallInt
  
  competenceId   String
  courseId     String

  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  competence Competence @relation(fields: [competenceId], references: [id], onDelete: Cascade)

  @@unique([competenceId, courseId])
}

model StudentCompetenceCharacteristic {
  id         String @id @default(uuid())
  scaleValue Int    @db.SmallInt

  competenceId String
  studentId    String?

  student    Student?   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  competence Competence @relation(fields: [competenceId], references: [id], onDelete: Cascade)
}

model StudentExpectingCompetence {
  id         String @id @default(uuid())
  scaleValue Int    @db.SmallInt

  competenceId String
  studentId    String?

  student    Student?   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  competence Competence @relation(fields: [competenceId], references: [id], onDelete: Cascade)  
}

model CourseCompetenceCharacteristic {
  id         String @id @default(uuid())
  scaleValue Int    @db.SmallInt

  competenceId String 
  courseId     String?

  course     Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  competence Competence @relation(fields: [competenceId], references: [id], onDelete: Cascade)
}

model Event {
  id        String @id @default(uuid())
  name      String @db.Text
  startDate String @db.Text
  endDate   String @db.Text
  courseId  String 
  curriculumId String?
 
  course             Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  curriculum Curriculum? @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  coaches            Coach[]
  simulators         Simulator[]
}

model Coach {
  id         String  @id @default(uuid())
  email      String  @db.Text
  firstName  String? @db.Text
  middleName String? @db.Text
  lastName   String? @db.Text
  userId     String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  events     Event[]
  simulators Simulator[]
}

model Simulator {
  id   String @id @default(uuid())
  name String @db.Text
  courseId String  @db.Text

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)  
  events  Event[]
  coaches Coach[]
}

model Schedule {
  id     String  @id @default(uuid())
  times  Times[]
  student Student?
}

model Times {
  id              String        @id @default(uuid())
  day    Days
  time            Time[]
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId String

  @@unique([scheduleId, day])
}

model Time {
  id              String        @id @default(uuid())
  startTime Float 
  endTime Float
  timesId String

  times Times @relation(fields: [timesId], references: [id], onDelete: Cascade)
}

model Curriculum {
  id              String        @id @default(uuid())
  cirriculumEvents Event[]

  student Student?
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}