generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @db.Text
  password String   @db.Text
  roles    String[]

  student Student?
  coach   Coach?
  courses Course[]
}

model Student {
  id         String  @id @default(uuid())
  email      String  @db.Text
  firstName  String? @db.Text
  middleName String? @db.Text
  lastName   String? @db.Text
  birthDate  String? @db.Text
  user       User    @relation(fields: [userId], references: [id])

  competences CompetenceCharacteristicForStudent[]
  userId      String                               @unique
  courses     Course[]
}

model Course {
  id        String @id @default(uuid())
  name      String @db.Text
  startDate String? @db.Text
  endDate   String? @db.Text
  creatorId String @db.Text

  students                 Student[]
  prerequisiteCompetencies CompetenceCharacteristicForCourse[]
  improvingCompetencies    ImprovingCompetence[]
  events                   Event[]
  creator                  User?                               @relation(fields: [creatorId], references: [id])
}

model Competence {
  id   String @id @default(uuid())
  name String @db.Text

  improvingCompetence                ImprovingCompetence?
  competenceCharacteristicForCourse  CompetenceCharacteristicForCourse?
  competenceCharacteristicForStudent CompetenceCharacteristicForStudent?
}

model ImprovingCompetence {
  id             String @id @default(uuid())
  improvingValue Int    @default(0) @db.SmallInt
  competenceId   String @unique

  courses    Course[]
  competence Competence @relation(fields: [competenceId], references: [id])
}

model CompetenceCharacteristicForStudent {
  id         String @id @default(uuid())
  scaleValue Int    @db.SmallInt

  competenceId String  @unique
  studentId    String?

  student    Student?   @relation(fields: [studentId], references: [id])
  competence Competence @relation(fields: [competenceId], references: [id])
}

model CompetenceCharacteristicForCourse {
  id         String @id @default(uuid())
  scaleValue Int    @db.SmallInt

  competenceId String  @unique
  courseId     String?

  course     Course?    @relation(fields: [courseId], references: [id])
  competence Competence @relation(fields: [competenceId], references: [id])
}

model Event {
  id        String @id @default(uuid())
  name      String @db.Text
  startDate String @db.Text
  endDate   String @db.Text
  courseId  String 

  prerequisiteEvents Event[]     @relation("EventPrerequisiteEvents")
  eventsRelation     Event[]     @relation("EventPrerequisiteEvents")
  course             Course      @relation(fields: [courseId], references: [id])
  coaches            Coach[]
  simulators         Simulator[]
}

model Coach {
  id         String  @id @default(uuid())
  email      String  @db.Text
  firstName  String? @db.Text
  middleName String? @db.Text
  lastName   String? @db.Text
  userId     String  @unique

  user User @relation(fields: [userId], references: [id])

  events     Event[]
  simulators Simulator[]
}

model Simulator {
  id   String @id @default(uuid())
  name String @db.Text

  events  Event[]
  coaches Coach[]
}